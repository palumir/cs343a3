TODO:
1. termination stage: client can be terminated gracefully. However, server and binder don't terminate after receiving TERMINATE    MESSAGE from client

2. 1 server, 1 client 

3. create more sample propgrams for testing

4. 1 server, multiple clients

5. multiple servers, 1 client

6. multiple servers, multiple clients

7. round robin

8. function overloading

9. Memory Leak

10.handle server/client failure

Done:
1. makefile
2. server can successfully register its functions into binder's database
3. binder's database is able to handle duplicate register and function overloading(I
   think)
4. binder can accept the loc_request from client and be able to send server's location 
   back to client
5. In rpc.cc:
   skeleton registeredFunctions[256];
   string functionNames[256];
   int* argTypesList[256];
   These 3 data structures should be vector/map or other data structures instead  
   of hardcoded length array
6. All functions returned correctly   


Function being tested:
1. rpcInit:      yes 
2. rpcCall:      yes, cannot find any bugs so far
3. rpcRegister:  yes, cannot find any bugs so far
4. rpcExecute:   yes, cannot terminate after receiving TERMINATE MESSAGE from client
5. rpcTerminate: yes
